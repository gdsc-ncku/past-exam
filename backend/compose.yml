services:
  postgres:
    image: postgres:latest
    container_name: MyPostgres
    volumes:
      - ./db_data:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - backend-network
  redis:
    image: redis:7-alpine
    container_name: MyRedis
    ports:
      - 6379:6379
    volumes:
      - ./redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - backend-network
  minio:
    image: quay.io/minio/minio:latest
    container_name: MyMinio
    volumes:
      - ./minio_data:/data
    ports:
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=${MINIO_ACCESS_KEY}
      - MINIO_ROOT_PASSWORD=${MINIO_SECRET_KEY}
    command: server /data --console-address ":9001"
    networks:
      - backend-network
  createbuckets:
    image: minio/mc
    depends_on:
      - minio
    environment:
      - MINIO_ACCESS_KEY=${MINIO_ACCESS_KEY}
      - MINIO_SECRET_KEY=${MINIO_SECRET_KEY}
    entrypoint: >
      /bin/sh -c "
      sleep 5;
      /usr/bin/mc alias set myminio http://minio:9000 ${MINIO_ACCESS_KEY} ${MINIO_SECRET_KEY};
      /usr/bin/mc mb myminio/${MINIO_FILE_BUCKET} --ignore-existing;
      /usr/bin/mc mb myminio/${MINIO_USER_AVATAR_BUCKET} --ignore-existing;
      /usr/bin/mc anonymous set public myminio/${MINIO_FILE_BUCKET};
      /usr/bin/mc anonymous set public myminio/${MINIO_USER_AVATAR_BUCKET};
      exit 0;
      "
    networks:
      - backend-network
  nginx-proxy:
    image: nginx:latest
    depends_on:
      - minio
    ports:
      - 9000:9000
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - backend-network
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    depends_on:
      - postgres
      - minio
      - createbuckets
      - redis
      - nginx-proxy
    env_file:
      - .env
    environment:
      - MODE=prod
    ports:
      - 8000:8000
    networks:
      - backend-network
  frontend:
    # image: ghcr.io/gdsc-ncku/pastexam/frontend:master
    build:
      context: ../frontend
      dockerfile: Dockerfile
    restart: always
    environment:
      - NEXT_PUBLIC_API_URL=https://api.ncku-pastexam.ccns.io
      - NEXT_PUBLIC_FILE_SERVER_URL=https://s3.ncku-pastexam.ccns.io
      
    ports:
      - 3000:3000
    networks:
      - backend-network
networks:
  backend-network:
    driver: bridge
